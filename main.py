"""
È£éÊ∞¥ÂëΩÁêÜÂ∫îÁî®‰∏ªÁ®ãÂ∫è
Êèê‰æõÂÆåÊï¥ÁöÑÈ£éÊ∞¥ÂëΩÁêÜÂàÜÊûêÂäüËÉΩ
"""

from flow import create_fengshui_analysis_flow, create_bazi_only_flow, create_fengshui_consultation_flow, create_quick_daily_flow
import sys

def display_menu():
    """ÊòæÁ§∫‰∏ªËèúÂçï"""
    print("\n" + "="*50)
    print("üèÆ Ê¨¢Ëøé‰ΩøÁî®È£éÊ∞¥ÂëΩÁêÜÂ§ßÂ∏à üèÆ")
    print("="*50)
    print("ËØ∑ÈÄâÊã©ÊÇ®ÈúÄË¶ÅÁöÑÊúçÂä°Ôºö")
    print("1. ÂÆåÊï¥ÂëΩÁêÜÂàÜÊûêÔºàÂÖ´Â≠ó+È£éÊ∞¥+ËøêÂäøÔºâ")
    print("2. ÂÖ´Â≠óÂëΩÁêÜÂàÜÊûê")
    print("3. È£éÊ∞¥Âí®ËØ¢")
    print("4. ÊØèÊó•ËøêÂäøÊü•ËØ¢")
    print("5. ÈÄÄÂá∫")
    print("="*50)

def main():
    """‰∏ªÁ®ãÂ∫èÂÖ•Âè£"""
    
    while True:
        display_menu()
        
        try:
            choice = input("ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÈÄâÊã© (1-5): ").strip()
            
            if choice == "1":
                run_full_analysis()
            elif choice == "2":
                run_bazi_analysis()
            elif choice == "3":
                run_fengshui_consultation()
            elif choice == "4":
                run_daily_fortune()
            elif choice == "5":
                print("\nÊÑüË∞¢‰ΩøÁî®È£éÊ∞¥ÂëΩÁêÜÂ§ßÂ∏àÔºåÁ•ùÊÇ®ÂêâÁ••Â¶ÇÊÑèÔºÅüéã")
                break
            else:
                print("‚ö†Ô∏è Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ•1-5‰πãÈó¥ÁöÑÊï∞Â≠ó")
                
        except KeyboardInterrupt:
            print("\n\nÊÑüË∞¢‰ΩøÁî®È£éÊ∞¥ÂëΩÁêÜÂ§ßÂ∏àÔºåÁ•ùÊÇ®ÂêâÁ••Â¶ÇÊÑèÔºÅüéã")
            break
        except Exception as e:
            print(f"‚ùå Á®ãÂ∫èÊâßË°åÂá∫Èîô: {e}")
            print("ËØ∑ÈáçÊñ∞Â∞ùËØï...")

def run_full_analysis():
    """ËøêË°åÂÆåÊï¥ÂëΩÁêÜÂàÜÊûê"""
    print("\nüéØ ÂºÄÂßãÂÆåÊï¥ÂëΩÁêÜÂàÜÊûê...")
    
    shared = {
        "service_type": "full_analysis"
    }
    
    try:
        # ÂàõÂª∫ÂÆåÊï¥ÂàÜÊûêÊµÅÁ®ã
        flow = create_fengshui_analysis_flow()
        
        # ËøêË°åÊµÅÁ®ã
        result = flow.run(shared)
        
        print("\n‚ú® ÂÆåÊï¥ÂàÜÊûêÂ∑≤ÂÆåÊàêÔºÅÊÇ®ÂèØ‰ª•ÂèÇËÄÉ‰ª•‰∏äÂª∫ËÆÆÂÆâÊéíÁîüÊ¥ª„ÄÇ")
        
        # ËØ¢ÈóÆÊòØÂê¶‰øùÂ≠òÊä•Âëä
        save_choice = input("\nÊòØÂê¶ÈúÄË¶Å‰øùÂ≠òÂàÜÊûêÊä•ÂëäÔºü(y/n): ").strip().lower()
        if save_choice in ['y', 'yes', 'ÊòØ']:
            save_report(shared.get("final_report"), "ÂÆåÊï¥ÂàÜÊûêÊä•Âëä")
            
    except Exception as e:
        print(f"‚ùå ÂàÜÊûêËøáÁ®ã‰∏≠Âá∫Èîô: {e}")

def run_bazi_analysis():
    """ËøêË°åÂÖ´Â≠óÂëΩÁêÜÂàÜÊûê"""
    print("\nüéØ ÂºÄÂßãÂÖ´Â≠óÂëΩÁêÜÂàÜÊûê...")
    
    shared = {
        "service_type": "bazi_only"
    }
    
    try:
        flow = create_bazi_only_flow()
        result = flow.run(shared)
        
        print("\n‚ú® ÂÖ´Â≠óÂàÜÊûêÂ∑≤ÂÆåÊàêÔºÅ")
        
        # ÊòæÁ§∫ÂàÜÊûêÁªìÊûúÊëòË¶Å
        if "analysis_result" in shared:
            analysis = shared["analysis_result"]
            print(f"\nüìä ‰∫îË°åÂπ≥Ë°°ÂàÜÊï∞: {analysis.get('balance_score', 'N/A')}")
            
            lucky_elements = analysis.get('lucky_elements', {})
            if lucky_elements.get('lucky_colors'):
                print(f"üé® Âπ∏ËøêÈ¢úËâ≤: {', '.join(lucky_elements['lucky_colors'][:3])}")
            
        save_choice = input("\nÊòØÂê¶ÈúÄË¶Å‰øùÂ≠òÂàÜÊûêÊä•ÂëäÔºü(y/n): ").strip().lower()
        if save_choice in ['y', 'yes', 'ÊòØ']:
            save_report(shared, "ÂÖ´Â≠óÂàÜÊûêÊä•Âëä")
            
    except Exception as e:
        print(f"‚ùå ÂàÜÊûêËøáÁ®ã‰∏≠Âá∫Èîô: {e}")

def run_fengshui_consultation():
    """ËøêË°åÈ£éÊ∞¥Âí®ËØ¢"""
    print("\nüéØ ÂºÄÂßãÈ£éÊ∞¥Âí®ËØ¢...")
    
    shared = {
        "service_type": "fengshui_consultation"
    }
    
    try:
        flow = create_fengshui_consultation_flow()
        result = flow.run(shared)
        
        print("\n‚ú® È£éÊ∞¥Âí®ËØ¢Â∑≤ÂÆåÊàêÔºÅ")
        
        # ÊòæÁ§∫È£éÊ∞¥Âª∫ËÆÆÊëòË¶Å
        if "fengshui_advice" in shared:
            advice = shared["fengshui_advice"]
            general_advice = advice.get("general", {})
            
            if general_advice.get("compass_advice"):
                compass = general_advice["compass_advice"]
                print(f"üß≠ ‰∏ªË¶ÅÂêâÂà©Êñπ‰Ωç: {compass.get('primary_direction', 'N/A')}")
                if compass.get('beneficial_colors'):
                    print(f"üåà ÊúâÂà©È¢úËâ≤: {', '.join(compass['beneficial_colors'][:3])}")
        
        save_choice = input("\nÊòØÂê¶ÈúÄË¶Å‰øùÂ≠òÂí®ËØ¢Êä•ÂëäÔºü(y/n): ").strip().lower()
        if save_choice in ['y', 'yes', 'ÊòØ']:
            save_report(shared, "È£éÊ∞¥Âí®ËØ¢Êä•Âëä")
            
    except Exception as e:
        print(f"‚ùå Âí®ËØ¢ËøáÁ®ã‰∏≠Âá∫Èîô: {e}")

def run_daily_fortune():
    """ËøêË°åÊØèÊó•ËøêÂäøÊü•ËØ¢"""
    print("\nüéØ ÂºÄÂßãÊØèÊó•ËøêÂäøÊü•ËØ¢...")
    
    shared = {
        "service_type": "daily_fortune",
        "user_info": {
            "name": "Áî®Êà∑",
            "birth_date": {"year": 1990, "month": 1, "day": 1, "hour": 12},
            "gender": "male",
            "location": "Âåó‰∫¨"
        }
    }
    
    try:
        flow = create_quick_daily_flow()
        result = flow.run(shared)
        
        print("\n‚ú® ÊØèÊó•ËøêÂäøÊü•ËØ¢Â∑≤ÂÆåÊàêÔºÅ")
        
        # ÊòæÁ§∫ËøêÂäøÊëòË¶Å
        if "daily_info" in shared:
            daily = shared["daily_info"]["today_fortune"]
            print(f"\nüìÖ ‰ªäÊó•Â§©Âπ≤Âú∞ÊîØ: {daily['ganzhi']}")
            print(f"üí∞ Ë¥¢Á•ûÊñπ‰Ωç: {daily['wealth_direction']}")
            print(f"‚≠ê ÁªºÂêàËØÑÂàÜ: {daily['overall_score']}/100")
            
    except Exception as e:
        print(f"‚ùå Êü•ËØ¢ËøáÁ®ã‰∏≠Âá∫Èîô: {e}")

def save_report(data, report_type):
    """‰øùÂ≠òÂàÜÊûêÊä•ÂëäÂà∞Êñá‰ª∂"""
    try:
        from datetime import datetime
        import json
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{report_type}_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ Êä•ÂëäÂ∑≤‰øùÂ≠òÂà∞: {filename}")
        
    except Exception as e:
        print(f"‚ùå ‰øùÂ≠òÊä•ÂëäÂ§±Ë¥•: {e}")

def demo_run():
    """ÊºîÁ§∫ËøêË°åÔºàÁî®‰∫éÊµãËØïÔºâ"""
    print("üß™ ÂºÄÂßãÊºîÁ§∫Ê®°Âºè...")
    
    shared = {
        "service_type": "demo"
    }
    
    try:
        flow = create_fengshui_analysis_flow()
        result = flow.run(shared)
        
        print("\n‚úÖ ÊºîÁ§∫ËøêË°åÂÆåÊàêÔºÅ")
        
        return shared
        
    except Exception as e:
        print(f"‚ùå ÊºîÁ§∫ËøêË°åÂ§±Ë¥•: {e}")
        return None

if __name__ == "__main__":
    # Ê£ÄÊü•ÂëΩ‰ª§Ë°åÂèÇÊï∞
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        # ÊºîÁ§∫Ê®°Âºè
        demo_run()
    else:
        # Ê≠£Â∏∏‰∫§‰∫íÊ®°Âºè
        main()